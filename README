# CarroJ√Å ‚Äì Sua jornada rumo ao carro ideal come√ßa aqui\!

-----
Importante:
Os requisitos referentes a prints ou gif do funcionamento e √† explica√ß√£o das decis√µes t√©cnicas e da experi√™ncia do usu√°rio foram atendidos atrav√©s do v√≠deo de apresenta√ß√£o disponibilizado no link abaixo.
Acesse o v√≠deo da apresenta√ß√£o no Google Drive ou Youtube:  
üîó [V√≠deo Apresenta√ß√£o CarroJ√Å] https://youtu.be/rY3cqXEvLs8  OU  https://drive.google.com/file/d/1DCT0hcYYFm42ClheGT6B7szeZuA9Rd4Q/view?usp=sharing

-----

## Vis√£o do Projeto

O **CarroJ√Å** √© uma aplica√ß√£o web inteligente desenvolvida para transformar a forma como os usu√°rios buscam, comparam e escolhem seus ve√≠culos. Nossa plataforma oferece uma experi√™ncia acess√≠vel, personalizada e eficiente para encontrar e comprar autom√≥veis, unindo tecnologia de ponta com uma interface amig√°vel.

Este projeto vai al√©m da simples listagem de carros, buscando:

  * **Compreender as prefer√™ncias do usu√°rio** atrav√©s de filtros intuitivos.
  * **Recomendar ve√≠culos ideais** com base no perfil do comprador.
  * **Auxiliar com um chatbot inteligente** que fornece respostas e sugest√µes em linguagem natural.

-----

## Tecnologias Utilizadas

  * **React**: Biblioteca JavaScript para constru√ß√£o da interface do usu√°rio.
  * **JavaScript (ES6+)**: Linguagem principal para desenvolvimento.
  * **CSS3**: Estiliza√ß√£o da aplica√ß√£o.
  * **HTML5**: Estrutura da aplica√ß√£o.
  * **JSON**: Armazenamento de dados est√°ticos dos ve√≠culos (arquivo `cars.json`).

### APIs Externas

  * **OpenAI API**: Integra√ß√£o com intelig√™ncia artificial para o assistente automotivo, gerando recomenda√ß√µes personalizadas.
  * **Location API (configurada, n√£o implementada)**: Para obten√ß√£o de dados geogr√°ficos, possivelmente para localiza√ß√£o de ve√≠culos.

### Bibliotecas e Pacotes

  * **React Hooks** (`useState`, `useEffect`, `useRef`) para gerenciamento de estado e efeitos.
  * **CSS Modules** para organiza√ß√£o dos estilos por componente.
  * **React Testing Library** para testes unit√°rios.
  * **Web Vitals** para monitoramento de performance.
  * **Anima√ß√µes CSS** para efeitos visuais.
  * **Google Fonts (Poppins)** para tipografia principal.

-----

# Plano de Neg√≥cios - CarroJ√Å

## Modelo de Neg√≥cios  
O modelo de neg√≥cios do CarroJ√Å ser√° baseado principalmente em an√∫ncios (ads), onde clientes (vendedores e concession√°rias) pagam para atingir um p√∫blico maior e ampliar suas vendas. Inicialmente, uma pequena taxa ser√° cobrada sobre as vendas realizadas pela plataforma.

No futuro, com o crescimento e consolida√ß√£o da plataforma, ser√° poss√≠vel cobrar uma taxa para que lojistas e concession√°rias anunciem seus ve√≠culos, enquanto os usu√°rios continuam aproveitando todos os benef√≠cios do site gratuitamente.

## Estrat√©gia de Aquisi√ß√£o de Usu√°rios  
A aquisi√ß√£o dos primeiros usu√°rios ser√° focada em oferecer uma intelig√™ncia artificial que facilite o processo para pessoas leigas no assunto. Muitas vezes o usu√°rio quer apenas escolher um carro normal, mas n√£o sabe por onde come√ßar ‚Äî a IA ajudar√° a guiar essa escolha.

O marketing investir√° na demonstra√ß√£o da capacidade da IA e seu aprimoramento constante. Futuramente, a IA poder√° at√© mesmo atuar vendendo carros diretamente pela plataforma.

Tamb√©m ser√£o firmadas parcerias com concession√°rias locais para garantir bons neg√≥cios e variedade de op√ß√µes aos usu√°rios.

## Estimativa de CAC (Custo de Aquisi√ß√£o de Cliente)  
O foco ser√° em tr√°fego pago, com investimento em influenciadores e artistas reconhecidos, como o Flow Podcast e canais com p√∫blico adulto.

Haver√° tamb√©m investimento em canais femininos, onde o interesse por carros n√£o √© t√£o forte. Nesse cen√°rio, a IA ser√° o diferencial para facilitar a compra e gerar confian√ßa.

## Proposta de LTV (Lifetime Value)  
Para maximizar o valor do cliente ao longo do tempo, ser√£o oferecidas assinaturas para grandes vendedores, garantindo receita constante.

Outra ideia √© desenvolver IAs personalizadas para vendedores, que possam atender clientes de forma aut√¥noma e at√© fechar neg√≥cios sozinhas.

No futuro, a plataforma poder√° usar blockchain e smart contracts para reduzir burocracia e custos, aumentando a efici√™ncia.

## Monetiza√ß√£o Vi√°vel  
As fontes de receita incluem:

- Vendas feitas por IA;
- An√∫ncios pagos por clientes para ampliar alcance;
- Taxas sobre vendas realizadas na plataforma;
- Assinaturas para acesso a IA personalizada;
- Aluguel de ve√≠culos com cobran√ßa de pequena taxa;
- Uso de smart contracts via blockchain para facilitar e baratear vendas.

## Estrat√©gia de Reten√ß√£o de Usu√°rios  
Para manter o usu√°rio engajado, ser√£o enviadas notifica√ß√µes personalizadas quando um carro que ele procura, dentro da faixa de pre√ßo desejada, for listado no site.

Para vendedores, haver√° um programa de fidelidade, reduzindo taxas conforme o volume de vendas aumenta ‚Äî assim, quanto mais vender, menos paga, estimulando o uso constante.

A IA ter√° papel fundamental na reten√ß√£o, facilitando as vendas, oferecendo suporte ativo e at√© assumindo a comunica√ß√£o com clientes em nome dos vendedores.






## Pr√©-requisitos para execu√ß√£o

Para rodar o projeto localmente, certifique-se de ter instalado em sua m√°quina:

- Node.js (vers√£o 16 ou superior recomendada)  
- npm (gerenciador de pacotes que vem com o Node.js)  

Al√©m disso, caso utilize a integra√ß√£o com a OpenAI API, ser√° necess√°rio configurar a chave de API (API Key) em seu ambiente para que a funcionalidade do assistente inteligente funcione corretamente.

### Configurando a chave da OpenAI API

1. Gere sua chave no site da OpenAI:  
   [https://platform.openai.com/account/api-keys](https://platform.openai.com/account/api-keys)

2. Na raiz do projeto, crie um arquivo chamado `.env` (se ainda n√£o existir).

3. Dentro do `.env`, adicione a seguinte linha, substituindo pelo valor da sua chave:

   ```env
   REACT_APP_OPENAI_KEY=sua_chave_aqui



## Como executar

1. Clone o reposit√≥rio:

```bash
git clone https://github.com/seu-usuario/carroja.git
cd carroja
Instale as depend√™ncias:

bash
Copiar
Editar
npm install
Inicie a aplica√ß√£o:

bash
Copiar
Editar
npm start
A aplica√ß√£o estar√° dispon√≠vel em http://localhost:3000.
